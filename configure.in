AC_PREREQ(2.57)
AC_INIT([FronTier],[1.0])
AC_CONFIG_SRCDIR([src/intfc/array.h])
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_CANONICAL_BUILD 
AC_PROG_AWK

AC_ARG_WITH(devel, [   --with-devel                Enables dependency tracking in examples for FronTier files],[ checklibs=FT_libs ] [ check_libs="" ] )

AC_SUBST(devel, ${checklibs})

# Checks for programs.
AC_ARG_WITH(seaborg,[  --with-seaborg              Setup for seaborg],[seaborgg="yes"],[seaborgg="no"])
if test $seaborgg = 'yes'; then
        module add GNU
        module load gcc
fi

########################### BUILD GAS ##############################
subgrid=" "
rotsym=" "
gascleann=" "
basecode="full"

AC_ARG_WITH(adv,[  --with-adv                 Compilation of the Advanced FronTier++ code ],[basecode="adv"],[])
AC_ARG_WITH(base,[  --with-base                 Compilation of the Basic FronTier++ code ],[basecode="base"],[])



AC_ARG_WITH(gd,[  --with-gd=PFX             Links with gd library for 1d post processing],[scriptotherlibsinc=" -L"${withval}"/lib " scriptotherlibs="-lgd "${scriptotherlibs} gdincs=" -D__GD__ -I"${withval}"/include "],[gdincs=""])

AC_ARG_WITH(gsl,[  --with-gsl=PFX             Links with gsl library for 1d post processing],[scriptotherlibsinc=" -L"${withval}"/lib " scriptotherlibs="-lgsl "${scriptotherlibs} gslincs=" -D__GSL__ -I"${withval}"/include "],[gslincs=""])

AC_ARG_WITH(gpu,[--with-gpu  Support GPU],[gpuincs=" -D__GPU__ " ],[gpuincs="" ])

if test "$gpuincs" = ""; then
    echo "GPU not enabled"
    AC_SUBST(USEGPU,${USEGPU})        
else
    echo "GPU enabled"
    AC_SUBST(USEGPU,${USEGPU})        
fi

AC_ARG_WITH(hypre,[--with-hypre  Support HYPRE],[hypreincs=" -D__HYPRE__ " ],[hypreincs="" ])

if test "$hypreincs" = ""; then
    echo "HYPRE not enabled"
    AC_SUBST(USEHYPRE,${USEHYPRE})        
else
    echo "HYPRE enabled"
    AC_SUBST(USEHYPRE,${USEHYPRE})        
fi

############################ Compiler Checks #########################
AC_PROG_CC(gcc gcc295 cc)
AC_PROG_CXX
AC_PROG_F77(gfortran)
AC_LANG(C)
############################ Compiler Checks Ends ####################





AC_ARG_WITH(mpi, [ --with-mpi             generic MPI support. See manual.], [ mpi=$withval ompincs=" -D__MPI__ "],[ mpi="no"])

AC_ARG_WITH(openmpi, [ --with-openmpi=path              use openmpi for MPI], [openmpi=$withval],[openmpi="no"])
if test $openmpi != "no" ; then
    ompincs=" -I"${openmpi}"/include -D__MPI__"
    scriptotherlibsinc=${scriptotherlibsinc} "-L"${openmpi}"/lib"
    scriptotherlibs=${scriptotherlibs} "-lmpi -lmpi_cxx -lpthread"
fi


AC_ARG_WITH(extra-incs,[  --with-extra-incs              a spot to put extra includes.],[extrai=$withval ],[extrai=" "])

AC_ARG_WITH(extra-libs,[  --with-extra-libs              a spot to put extra libs.],[extral=${withval} ],[extral=" " ])
scriptotherlibs=${scriptotherlibs}${extral}

AC_CHECK_HEADER(malloc.h,[malloch='yes'],[malloch='no'])
systemincs=" "
if test $malloch = 'no'; then
                # darwin places malloc.h in malloc/malloc.h
                AC_CHECK_HEADER(malloc/malloc.h,[mallochd='yes'],[mallochd='no'])
                #systemincs=${systemincs}"-I/usr/include/malloc/ -I/usr/include/sys/"
                systemincs=${systemincs}"-I/usr/include/malloc/ "
                if test $mallochd = 'no'; then
                        AC_MSG_ERROR([malloc.h cannot be found  please do something about this.])
                
                fi
fi
 
AC_CHECK_FUNC(malloc,[malloc='yes'],[malloc='no'])
                if test $malloc = 'no'; then
                AC_MSG_ERROR([malloc cannot be found  please do something about this.])
                fi

#################################################
### TESTS TO BE PREFORMED FOR FRONTIER
################################################

# checks for the function feenableexcept. If found -DHAS_FENV is set.

AC_CHECK_LIB(m,feenableexcept,[fenv=" -DHAS_FENV "],[fenv=""])

#done feenableeexpcept test

# checks for libieee
AC_CHECK_LIB(ieee,main,[],[])
AC_CHECK_LIB(hdf,main,[scriptotherlibs=${scriptotherlibs}" -lhdf " testhdff='yes'],[testhdff='no'])

#done with ieee check

testmpi="no"
mpiprexif="no"
mpichprexif="no"
testovertureprefix="neither"
libover="neither"
app="neither"
testappprefix="neither"
# check for overture

AC_ARG_WITH(hdf,[  --with-hdf              Support for the hdf library],[hdffprefix=$withval hdff="yes"],[hdff="no"])
if test $hdff = 'yes';then
        hdfincs=" -I"${hdffprefix}"/include -DUSE_HDF "
        scriptotherlibsinc=${scriptotherlibsinc}" -L/usr/lib -L"${hdffprefix}"/lib "
        scriptotherlibs=${scriptotherlibs}" -lmfhdf -ldf -ljpeg -lz "        

fi
AC_ARG_WITH(hdf5,[  --with-hdf5              Support for the hdf5 library],[hdff5prefix=$withval hdff5="yes"],[hdff5="no"])
if test $hdff5 = 'yes';then
        hdf5incs=" -I"${hdff5prefix}"/include -DUSE_HDF5 "
        scriptotherlibsinc=${scriptotherlibsinc}" -L"${hdff5prefix}"/lib "
        scriptotherlibs=${scriptotherlibs}" -lhdf5"        

fi

AC_ARG_WITH(overture-prefix,[  --with-overture-prefix=PFX    Prefix where overture is installed],[testovertureprefix="yes" overtureprefix=$withval],[testovertureprefix="no"])

if test $testovertureprefix = 'no' && test $libover = 'no'; then
AC_MSG_ERROR([libOverture.so can not be found on this system, and its location is not specified. Please specify where it is using the --with-overture-prefix, or do not select the overture option.])
fi

AC_ARG_WITH(no-debugging,[  --with-no-debugging          Removes the -g option while compiling],[debug=" "],[debug=" -g "])


##########################################################################################
#              ||  all things required for overture.  ||
#if overture is opted for and found, check for A++, Mesa, Xlibs, and hdf  and others

if test $libover = 'yes' || test $testovertureprefix = 'yes'; then

AC_CHECK_LIB(libApp,main,[app="yes"],[app="no"])
##check for mesa on syste
AC_CHECK_LIB(MesaGL,main,[mesagl="yes"],[mesagl="no"]) 
AC_CHECK_LIB(MesaGLU,main,[mesaglu="yes"],[mesaglu="no"])
AC_CHECK_LIB(GLw,main,[glw="yes"],[glw="no"])
        sysmesa=yes
        if test $mesagl = 'no' || test mesaglu = 'no'|| test GLw = 'no';then
        sysmesa='no'
        fi 
### check for X libs 
AC_PATH_X
## check for hdf
AC_CHECK_LIB(mfhdf,main,[mfhdf="yes"],[mfhdf="no"])
AC_CHECK_LIB(df,main,[df="yes"],[df="no"])
AC_CHECK_LIB(jpeg,main,[jpeg="yes"],[jpeg="no"])
AC_CHECK_LIB(z,main,[z="yes"],[z="no"])
syshdf=yes
        if test $mfhdf = 'no' || test $df = 'no' || test $jpeg = 'no' || test $z = 'no';then
        syshdf='no'
        fi

#now check for user specified.

AC_ARG_WITH(overture-hdf-prefix,[  --with-overture-hdf-prefix=PFX    Prefix where HDF is installed (necessary for Overture)],[testhdfprefix="yes" hdfprefix=$withval],[testhdfprefix="no"])
AC_ARG_WITH(overture-mesa-prefix,[  --with-overture-mesa-prefix=PFX    Prefix where mesa is installed (necessary for Overture)],[testmesaprefix="yes" mesaprefix=$withval],[testmesaprefix="no"])




AC_ARG_WITH(overture-app-prefix,[  --with-overture-app-prefix=PFX    Prefix where A++ is installed(necessary for overture)],[testappprefix="yes" appprefix=$withval],[testappprefix="no"])


# stop configure if neither is found.

                if test $app = 'no' && test $testappprefix = 'no'; then
                AC_MSG_ERROR([libApp.so can not be found on this system, and its location is not specified. It you are using overture, it is also necessary to use this library. Please specify where it is using the --with-overture-app-prefix, or do not select the overture option.])
                fi
                
                if test $sysmesa = 'no' && test $testmesaprefix = 'no';then
                AC_MSG_ERROR([parts of, or all of the mesa libraries are missing, and their location is not specified. If you are using overture it is necessary to use this library.  Please specify where it is using the --with-overture-mesa-prefix, or do not select the overture option.])
                fi                
                
                if test $syshdf = 'no' && test $testhdfprefix = 'no';then
                AC_MSG_ERROR([parts of, or all of the hdf libraries are missing, and their location is not specified. If you are using overture it is necessary to use this library.  Please specify where it is using the --with-overture-hdf-prefix, or do not select the overture option.])
                fi

fi

############################################################################################
#done with overture
########################### TSTT check #####################





AC_ARG_ENABLE(itaps,
AS_HELP_STRING([--enable-itaps],[compiles in extra data into intfc structure needed for all itaps components (iMesh)]),
[if (test "$enableval" = "yes") ; then
        itapsd=' -DIMESH '
  else
        itapsd=' '
    fi
    ])

AC_ARG_ENABLE(imesh,
AS_HELP_STRING([--enable-imesh],[compiles in extra data into intfc structure needed for iMesh]),
[if (test "$enableval" = "yes") ; then
        itapsd='-DIMESH'
 fi
])
    

####################################################
# check generic for mpich
AC_ARG_WITH(mpich,[  --with-mpich=PFX              Support for the mpich library, add the =PFX where PFX is the path to mpich, if it not in a system location,FronTier may suport other mpi implementations, that can put here also.],[mpichprefix=$withval mpichh="yes"],[mpichh="no"])
if test $mpichh = 'yes';then
        mpichincs=" -I"${mpichprefix}"/include -D__MPI__ "
        scriptotherlibsinc=${scriptotherlibsinc}" -L"${mpichprefix}"/lib "
        scriptotherlibs=${scriptotherlibs}" -lmpich -lmpichcxx -lpthread"
fi

AC_ARG_WITH(petsc_dir, [ --with-petsc=path                 compile with petsc support], [petsc_dir=$withval iFluid="cd iFluid && \$(MAKE)"], [petsc_dir="" iFluid=""])
if test "$petscdir" = ""; then
    echo "PETSC not enabled, cannot build iFluid"
else
    if test $mpichh = 'no' -a $ompi = 'no' -a $mpi = 'no' ;then
        echo "Cannot enable PETSC without mpi"
        petscdir=""
        iFluid=""
    else
        echo "PETSC enabled"
	AC_SUBST(PETSC_DIR,${petsc_dir})
	AC_SUBST(PETSC_ARCH,${PETSC_ARCH})
	AC_SUBST(PETSC_LIB,${PETSC_LIB})
	AC_SUBST(PETSC_INCLUDE,${PETSC_INCLUDE})
       	
    fi
fi

Collision=""
AC_ARG_WITH(cgal_dir,[  --with-cgal-dir=path             Support for the CGAL directory],[cgal_dir=$withval],[cgal_dir=""])
AC_ARG_WITH(cgal_include,[  --with-cgal-include=path              Support for the CGAL includes],[cgal_inc=$withval],[cgal_inc=""])
AC_ARG_WITH(cgal_lib,[  --with-cgal-lib=path              Support for the CGAL library],[cgal_lib=$withval],[cgal_lib=""])
if test "$cgal_dir" = ""; then
        if test "$cgal_inc" = "" || test "$cgal_lib" = ""; then
            echo "CGAL is not enabled"
            echo "Collision Detection disabled"
        else
            echo "CGAL enabled"
            echo "Collision Detection enabled"
            AC_SUBST(CGAL_DIR,${cgal_dir})
            AC_SUBST(CGAL_INCLUDE,${cgal_inc})
            AC_SUBST(CGAL_LIB,${cgal_lib})
            Collision="cd Collision && \$(MAKE)"
        fi
else
        echo "CGAL enabled, cgal_dir = ${cgal_dir}"
        echo "Collision Detection enabled"
        AC_SUBST(CGAL_DIR,${cgal_dir})
        AC_SUBST(CGAL_INCLUDE,"${cgal_dir}/include")
        AC_SUBST(CGAL_LIB,"${cgal_dir}/lib")
        Collision="cd Collision && \$(MAKE)"
fi
AC_SUBST(iFluid, ${iFluid})


AC_ARG_WITH(boost_dir,[  --with-boost-dir              Support for the BOOST directory],[boost_dir=$withval],[boost_dir=""])
if test "$boost_dir" = ""; then
        echo "BOOST is not enabled"
else
        echo "BOOST enabled, boost_dir = ${boost_dir}"
        AC_SUBST(BOOST_DIR,${boost_dir})
        AC_SUBST(BOOST_INCLUDE,"${BOOST_DIR}/include")
        AC_SUBST(BOOST_LIB,"${BOOST_DIR}/lib")
fi

AC_ARG_WITH(cvodedir, [ --with-cvode-dir=path                 compile with cvode support], [cvodedir=$withval folding="cd folding && \$(MAKE)"], [cvodedir="" folding=""])
if test "$cvodedir" = ""; then
    echo "CVODE not enabled, cannot implement implicit solver"
    echo "Folding disabled"
else
    echo "CVODE enabled"
    AC_SUBST(CVODE_DIR,${cvodedir})
    AC_SUBST(CVODE_INCLUDE,"${CVODE_INCLUDE}")
    AC_SUBST(CVODE_LIB,"${CVODE_LIB}")
fi
AC_SUBST(iFluid, ${iFluid})


#/////////////////////////////
if test $build_os = "irix" || test $build_cpu = "irix" || test $build_vendor = "irix" || test $build_os = "IRIX" || test $build_cpu = "IRIX"|| test $build_vendor = "IRIX";then
echo made it in
AC_CHECK_LIB(gen,basename,[ibasename='yes'],[ibasename='no'])
AC_CHECK_LIB(gen,dirname,[idirname='yes'],[idirname='no'])
firix=" -DFTIRIX -common "
scriptotherlibs=${scriptotherlibs}" -lgen -lmalloc "
fi
# done with irix

echo  $build_os
#check for linux
if test $build_os = "linux" || test $build_os = "linux-gnu";then
echo using linux GCC optimizations when no debug option
if test "$debug" = ""; then
    optimization=" -O3 "
else
    optimization=" "
fi
fi

#done with linux
if test $build_os = "darwin7.8.0" || test $build_os = "darwin";then
echo using  GCC optimizations
optimization=" -O3 "
scriptotherlibs=${scriptotherlibs}"  "
fi



# check for sun
if test $build_os = "sun" || test $build_cpu = "sun" || test $build_vendor = "sun" || test $build_os = "SUN" || test $build_cpu = "SUN"|| test $build_vendor = "SUN";then
scriptotherlibs=${scriptotherlibs}" -lmalloc "
fsun=" -ext_names -w "
fi
# done with sun

AC_CHECK_FUNC(basename,[basename='yes'],[basename='no'])
AC_CHECK_FUNC(dirname,[dirname='yes'],[dirname='no'])

if test $basename = 'no' && test $ibasename = 'no';then
echo using alternate basename and dirname.
AC_SUBST(name,name)
noname=" -DNO_DIRNAME "
echo ${scriptotherlibsinc}
scriptotherlibsinc=${scriptotherlibsinc}" -L""../util/name "
echo ${scriptotherlibsinc}
else
AC_SUBST(name,[])
noname=""
echo not using name.h
fi

##############################################################
# Setting C++ as the compiler
###############################################################
AC_SUBST(CC,$CC)
AC_SUBST(CXX,$CXX)
AC_SUBST(F77,$F77)
AC_SUBST(F77_LIBS,$F77_LIBS)
AC_SUBST(libext,"")
cppflagss=""

######################################################
##### CHANGING VARIBLES BASED ON ABOVE TESTS AND INPUT
#########################################################

#  Generic MPI
mpiincs=''
mpi=''


if test $testmpi = 'yes';then 
mpi=" -D__MPI__ "
if test $seaborgg = 'yes';then
echo ""
echo "hohoho seaborg and mpi what a blast!"
echo ""
mpiincs="-mpe"
aixmpichangback=${scriptotherlibs}
fi
scriptotherlibs=${scriptotherlibs}" -lmpi "
if test $seaborgg = 'yes';then
scriptotherlibs=${aixmpichangback}
fi
fi 




#overture
###############################
if test $testovertureprefix = 'yes'; then
# flag to compile overture part of frontier
over=" -DUSE_OVERTURE "
#includes nesscary to compile overter code in frontier
overinc=" -I"${overtureprefix}"/include/ " 
# overture requires g++
AC_SUBST(CC,$CXX)
# paralell overture requires mpif77

if test $testmpich = 'yes' || test $testmpi = 'yes' || test $mpichprefix = 'yes';then
AC_SUBST(F77,"mpif77")
fi

# all the extra libs needed! 
overlib=" -lOverture -lOverture_static -lXm  -lXpm -lXp -lXt -lXmu -lXi -lXext -lX11 -lmfhdf -ldf -ljpeg -lz -lMesaGL -lMesaGLU -lGLw -lApp -lApp_static "
scriptotherlibs=${scriptotherlibs}${overlib}
scriptotherlibsinc=${scriptotherlibsinc}" -L"${overtureprefix}"/lib/ -L"${x_libraries}" -L"${hdfprefix}"/lib -L"${mesaprefix}"/lib -L"$appprefix"/lib "
fi

## if A++ and Overture installed in the system.
if test $testappprefix = 'yes'; then
appinc="-I"${appprefix}"/include "
fi


if test [[$testover = 'yes']];then
over="-DUSE_OVERTURE "
fi

###################################
#end overture
 
ftlibdubug=" "

optimization=$optimization 

######################################################################
## The complete varibles as the are sent to their parts of the code.
#####################################################################

# included in all code in: driver 
#                          front 
#                          hyp 
#                          intfc 
#                          tri

scriptftlibincs=" -I.. -I../util"${debug}${cppflagss}${amrincs}${hdfincs}${hdf5incs}${mpichincs}${overinc}${appinc}${ftlibdubug}${itapsd}${fenv}${optimization}${over}${firix}${noname}${hdfinc}${systemincs}${ompincs}${gdincs}${gpuincs}${gslincs}${hypreincs}${subgrid}


#included in all code in: example and testfront 
scriptexampleincs=${mpichincs}${amrincs}${hdfincs}${hdf5incs}${hdfinc}${systemincs}${ompincs}${gpuincs}${gslincs}${hypreincs}${subgrid}

#included in all code in: util/util
scriptutilincs=" -I../.. -I../ "${debug}${cppflagss}${mpichincs}${amrincs}${hdfincs}${hdf5incs}${fenv}${optimization}${firix}${noname}${hdfinc}${systemincs}${ompincs}${gpuincs}${gslincs}${hypreincs}${subgrid}

#include in all code in: util/dutil
scriptdutilincs=" -I../.. -I../ "${debug}${cppflagss}${mpichincs}${amrincs}${hdfincs}${hdf5incs}${fenv}${optimization}${firix}${noname}${hdfinc}${systemincs}${ompincs}${gpuincs}${gslincs}${hypreincs}${subgrid}

flagsss=$FFLAGS${optimization}${firix}${fsun}${debug}${cppflagss}

headers=`find ./src/util/ ./src/intfc ./src/front -name \*\.*h | perl -e "s/\.\/src\/(.*)\n/include\/FronTier\/\1 /g" -p`

include_dirs="include/FronTier/intfc include/FronTier/front include/FronTier/util"

AC_SUBST(headers, $headers)
AC_SUBST(include_dirs, $include_dirs)

# Substitute these changes in the makefile.ins
AC_SUBST(sn_ellip,$snyesorno)
AC_SUBST(debugg,$debug)
AC_SUBST(tsttyesornoo,$tsttyesorno)
AC_SUBST(FFLAGS,$flagsss)
AC_SUBST(ftlibincs,$scriptftlibincs)
AC_SUBST(utilincs,$scriptutilincs)
AC_SUBST(exampleincs,$scriptexampleincs)
AC_SUBST(dutilincs,$scriptdutilincs)
AC_SUBST(CFLAGS,"")
AC_SUBST(otherlibs,$scriptotherlibs)
AC_SUBST(otherlibsinc,$scriptotherlibsinc)
AC_SUBST(randy,$RANLIB)
AC_SUBST_FILE(ftbuild)
ftbuild=./src/util/ftrules



# Write the makefiles
if test $basecode = "full"; then
filelist='Makefile 
src/Makefile 
src/util/Makefile 
src/front/Makefile 
src/intfc/Makefile 
Collision/Makefile
airfoil/Makefile
folding/Makefile
parachute/Makefile
parachute2d/Makefile
sprModel/Makefile
subsurf/Makefile
crystal/Makefile
example2d/Makefile
example3d/Makefile
iTaps/Makefile
finance/Makefile
melting/Makefile
curvature/Makefile
cell/Makefile
pde/Makefile
MonteCarlo/Makefile
timeSeries/Makefile
iFluid/Makefile
vFluid/Makefile
rgbody/Makefile
climate/Makefile
poisson/Makefile
cFluid/Makefile
wings/Makefile
cim/Makefile
DG/Makefile
inverse/Makefile
solver/Makefile
weno/Makefile
proj/Makefile
devel-deps.inc
iMesh-Defs.inc'
fi

if test $basecode = "adv"; then
filelist='Makefile 
src/Makefile
src/util/Makefile 
src/front/Makefile 
src/intfc/Makefile 
example2d/Makefile
example3d/Makefile
cFluid/Makefile
iFluid/Makefile
solver/Makefile
crystal/Makefile
devel-deps.inc
iMesh-Defs.inc'
fi

if test $basecode = "base"; then
filelist='Makefile 
src/Makefile 
src/util/Makefile 
src/front/Makefile 
src/intfc/Makefile 
example2d/Makefile
example3d/Makefile
cFluid/Makefile
devel-deps.inc
iMesh-Defs.inc'
fi


AC_CONFIG_FILES($filelist)

AC_OUTPUT
mkdir -p lib/
mkdir -p lib/${build_cpu}
mkdir -p src/front/${build_cpu}
mkdir -p src/intfc/${build_cpu}
mkdir -p src/util/${build_cpu}
mkdir -p src/util/d${build_cpu}

echo " Compiling with :"
echo   $ccft
echo   $F77
echo "The util flags are:" $scriptutilincs
echo
echo "The dutil flags are:" $scriptdutilincs
echo
echo "The front flags are:" $scriptftlibincs
echo 
echo "The example/testfront flags are:"$scriptexampleincs
echo ""


