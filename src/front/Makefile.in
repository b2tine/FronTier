CC=@CC@ -Wno-implicit-function-declaration
F77=@F77@
name = front

USEGPU=@USEGPU@

FT_G_OBJECTS = front_gpu.$(OBJEXT)

FT_C_OBJECTS = fredist2d.$(OBJEXT) \
fadv.$(OBJEXT) \
fadv3d.$(OBJEXT) \
fbdry1.$(OBJEXT) \
fbdry2.$(OBJEXT) \
fbdry3.$(OBJEXT) \
fbdry4.$(OBJEXT) \
fcheck3d.$(OBJEXT) \
fcollsn3d.$(OBJEXT) \
fcorrspnd.$(OBJEXT) \
fcrosscur.$(OBJEXT) \
fcrossext.$(OBJEXT) \
fcrstatus.$(OBJEXT) \
fdiagnostic.$(OBJEXT) \
fgb2d.$(OBJEXT) \
fgb3dutil.$(OBJEXT) \
fgb3d.$(OBJEXT) \
fgb3comp.$(OBJEXT) \
fglobal.$(OBJEXT) \
fgrid.$(OBJEXT) \
finit.$(OBJEXT) \
fint.$(OBJEXT) \
fnode.$(OBJEXT) \
fnodesub.$(OBJEXT) \
fprint.$(OBJEXT) \
fprop2d.$(OBJEXT) \
fprop3d.$(OBJEXT) \
fredist.$(OBJEXT) \
fredist3d.$(OBJEXT) \
frp1.$(OBJEXT) \
frp2.$(OBJEXT) \
fscatter.$(OBJEXT) \
fredist1d.$(OBJEXT) \
fscat1d.$(OBJEXT) \
fscat2d.$(OBJEXT) \
fscat3d1.$(OBJEXT) \
fscat3d2.$(OBJEXT) \
fscat3d3.$(OBJEXT) \
fstate2d.$(OBJEXT) \
fstate.$(OBJEXT) \
ftop.$(OBJEXT) \
fsub.$(OBJEXT) \
funtan2d.$(OBJEXT) \
funtan3d.$(OBJEXT) \
fuserintfc.$(OBJEXT) \
fuserhooks.$(OBJEXT) \
fvelo.$(OBJEXT)   \
fpatch3d.$(OBJEXT) \
fmap.$(OBJEXT)   \
fmap2.$(OBJEXT)   \
########################################################################################
# DO NOT MODIFY BELOW THIS LINE UNLESS YOUR POSITIVE YOU KNOW WHAT YOU WANT TO DO 
########################################################################################



libext = @libext@
OBJEXT = @OBJEXT@
ftlibincs = @ftlibincs@
build_cpu = @build_cpu@
RANLIB = @RANLIB@
incs = @exampleincs@
libincs = @otherlibsinc@
libs = @otherlibs@



all: 
	cd ../intfc && $(MAKE)
	$(RM) ../../lib/$(build_cpu)/libFronTier.a
	$(MAKE) ../../lib/$(build_cpu)/libFronTier.a


../../lib/$(build_cpu)/libFronTier.a: ../../lib/$(build_cpu)/lib$(name)$(libext).a
	cd ../intfc/ && $(MAKE)
	cd ../../lib/$(build_cpu) && $(RM) *.o && ar x libintfc.a && ar x libutil.a && ar x libfront.a && ar cru libFronTier.a *.o && ranlib libFronTier.a && $(RM) *.o

######## FT BUILD INSTRUCTIONS ##############################
ifeq ($(USEGPU),no)

VPATH = $(build_cpu):../

../../lib/$(build_cpu)/lib$(name)$(libext).a: make.dep $(build_cpu) $(FT_C_OBJECTS)
	$(RM) lib$(name)$(libext).a
	$(RM) ${build_cpu}/lib$(name)$(libext).a
	mkdir -p ../../lib
	mkdir -p ../../lib/$(build_cpu)
	cd $(build_cpu) && $(AR) cru lib$(name).a $(FT_C_OBJECTS) 
	cd $(build_cpu) && $(RANLIB) lib$(name).a && mv lib$(name).a ../../../lib/$(build_cpu)/lib$(name)$(libext).a

else

VPATH = $(build_cpu):../

../../lib/$(build_cpu)/lib$(name)$(libext).a: make.dep $(build_cpu) $(FT_C_OBJECTS) $(FT_G_OBJECTS)
	$(RM) lib$(name)$(libext).a
	$(RM) ${build_cpu}/lib$(name)$(libext).a
	mkdir -p ../../lib/
	mkdir -p ../../lib/$(build_cpu)/
	cd $(build_cpu) && $(AR) cru lib$(name).a $(FT_C_OBJECTS) $(FT_G_OBJECTS)
	cd $(build_cpu) && $(RANLIB) lib$(name).a && mv lib$(name).a ../../../lib/$(build_cpu)/lib$(name)$(libext).a

endif

$(build_cpu):
	mkdir -p $(build_cpu)

make.dep: ../util/make.dep
	cp ../util/make.dep make.util.dep
	sed -e "1,$$ s,$(name)/,,g" make.util.dep > make.dep

../util/make.dep:
	cd .. && ./util/mkfiles.pl
	cd .. && ./util/mkdep.pl
	cd .. && mv make.dep util/make.dep

include make.dep

diff:
	-diff -r . $(diffdir)/src/$(name) > DIFF

$(FT_C_OBJECTS):%.o: %.c
	$(CC) $(ftlibincs) -c $< -o $(build_cpu)/$@

$(FT_G_OBJECTS):%.o: %.cu
	nvcc -arch sm_20 -c $< -o $(build_cpu)/$@
######## END FT BUILD INSTRUCTIONS ##############################

clean:
	cd $(build_cpu) && $(RM) *.o

distclean:
	rm -rf $(build_cpu)
	$(RM) make.dep 
	$(RM) make.util.dep 

tagsfile:
	ctags ../intfc/*.c ../util/*.c *.c ../intfc/*.h ../util/*.h *.h
